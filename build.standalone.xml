
<!-- STANDALONE build for org.glite.slcs.common -->
<!-- Valery Tschopp <tschopp@switch.ch> -->
<!-- $Id: build.standalone.xml,v 1.7 2007/07/06 13:24:04 vtschopp Exp $ -->

<project name="org.glite.slcs.common" default="package" basedir=".">

	<property file="build.standalone.properties" />

	<!-- set global properties for this local build -->
	<property name="src.dir" location="${basedir}/src" />
	<property name="external.lib.dir" location="${basedir}/../repository/externals" />
	<property name="build.dir" location="${basedir}/build" />
	<property name="dist.dir" location="${basedir}/dist" />

	<!-- BouncyCastle JCE BC Provider library (jdk 1.4 and jdk 1.5) -->
	<property name="bouncycastle.jdk15.bcprov.jar" value="bouncycastle/1.34/noarch/jars/bcprov-jdk15-134.jar" />
	<property name="bouncycastle.jdk14.bcprov.jar" value="bouncycastle/1.34/noarch/jars/bcprov-jdk14-134.jar" />
	<target name="checks.bouncycastle" depends="sets.is.jdk,sets.bouncycastle.jdk14.jar,sets.bouncycastle.jdk15.jar">
		<echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}" />
	</target>
	<target name="sets.is.jdk">
		<echo message="ant.java.version=${ant.java.version}"/>
		<condition property="is.jdk15">
			<equals arg1="${ant.java.version}" arg2="1.5" />
		</condition>
		<condition property="is.jdk14">
			<equals arg1="${ant.java.version}" arg2="1.4" />
		</condition>
	</target>
	<target name="sets.bouncycastle.jdk14.jar" if="is.jdk14">
		<property name="bouncycastle.bcprov.jar" value="${bouncycastle.jdk14.bcprov.jar}"/>
		<echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}"/>
		<antcall target="checks.bouncycastle.jar"/>
	</target>
	<target name="sets.bouncycastle.jdk15.jar" if="is.jdk15">
		<property name="bouncycastle.bcprov.jar" value="${bouncycastle.jdk15.bcprov.jar}"/>
		<echo message="bouncycastle.bcprov.jar=${bouncycastle.bcprov.jar}"/>
		<antcall target="checks.bouncycastle.jar"/>
	</target>
	<target name="checks.bouncycastle.jar">
		<available property="exists.bouncycastle.jar" filepath="${external.lib.dir}" file="${bouncycastle.bcprov.jar}" />
		<fail unless="exists.bouncycastle.jar">${external.lib.dir}/${bouncycastle.bcprov.jar} is not available</fail>
	</target>
	
	
	<target name="javacheck" depends="checks.bouncycastle">
		<echo>Java version: ${ant.java.version}</echo>
	</target>

	<target name="init" depends="javacheck">
		<tstamp />
		<!-- jar list (from JRA1MW repository) -->
		<fileset id="external.lib.jar.set" dir="${external.lib.dir}">
			<include name="${bouncycastle.bcprov.jar}" />
			<include name="commons-codec/1.3/noarch/commons-codec-1.3.jar" />
			<include name="commons-collections/3.2/noarch/commons-collections-3.2.jar" />
			<include name="commons-configuration/1.2/noarch/commons-configuration-1.2.jar" />
			<include name="commons-httpclient/3.0.1/noarch/commons-httpclient-3.0.1.jar" />
			<include name="commons-lang/2.1.0/noarch/commons-lang-2.1.jar" />
			<include name="commons-logging/1.0.4/noarch/commons-logging.jar" />
			<include name="log4j/1.2.8/noarch/dist/lib/log4j-1.2.8.jar" />
		</fileset>
		
		
		
		<!-- classpath to compile -->
		<path id="compile.classpath">
			<fileset refid="external.lib.jar.set" />
		</path>
	</target>

	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile" depends="prepare">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src.dir}" debug="true" destdir="${build.dir}">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="package" depends="clean,compile">
		<!-- distribution directory -->
		<property name="dist.share.jar.dir" location="${dist.dir}/share/java" />
		<property name="dist.externals.jar.dir" location="${dist.dir}/externals/share/java" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.share.jar.dir}" />
		<mkdir dir="${dist.externals.jar.dir}" />
		<!-- jar all classes in share/java -->
		<property name="slcs.common.jar.file" location="${dist.share.jar.dir}/${slcs.common.jarfile}" />
		<jar jarfile="${slcs.common.jar.file}" basedir="${build.dir}" />
		<!-- copy all third party libs in externals/share/java -->
		<copy todir="${dist.externals.jar.dir}" flatten="true">
			<fileset refid="external.lib.jar.set" />
		</copy>
	</target>

	<target name="clean">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>
</project>
